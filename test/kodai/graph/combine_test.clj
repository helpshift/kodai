(ns kodai.graph.combine-test
  (:require [kodai.graph :as graph]))


(comment
  (defonce bundle (graph/project-info ["../../chit/hara/src"]))

  (keys bundle)
  ;;(:calls :namespaces :files :deps :unload :filemap :time)

  (keys (:calls bundle))
  (-> bundle :calls :forward)
  {hara.component/IComponent #{hara.component/-start hara.component/-stop hara.component/-stopped? hara.component/-started?}, hara.common/hash-map? #{}, hara.io.scheduler/start! #{hara.io.scheduler/scheduler hara.component/start}, hara.expression.shorthand/check #{hara.expression.shorthand/get->}, hara.concurrent.propagate/IPropagate #{hara.concurrent.propagate/propagate}, hara.data/treeify-keys-nested #{}, hara.string/path-root #{hara.string/path-vec}, hara.data/assoc-in-nil #{}, hara.event.condition.data/catch-condition #{}, hara.string/contains #{}, hara.reflect.pretty.display.sort/sort-terms-fn #{hara.reflect.pretty.display.sort/sort-fn}, hara.common.checks/thread? #{}, hara.object.enum/enum? #{hara.class.inheritance/ancestor-list}, hara.namespace.import/import #{hara.namespace.import/import-namespace}, hara.event.condition.util/parse-on-handler-forms #{hara.event.common/handler-form}, hara.string.path/path-stem-vec #{hara.string.path/split}, hara.string/split #{}, hara.reflect.core.extract/veeee #{}, hara.data/pathify-keys-nested #{}, hara.class.inheritance/best-match #{hara.class.inheritance/ancestor-tree}, hara.io.watch/kind-lookup #{hara.io.watch/event-kinds hara.io.watch/event-types}, hara.concurrent.ova/get-filtered #{hara.concurrent.ova/ova hara.expression.shorthand/check?->}, hara.namespace/resolve-ns #{}, hara.object.base/meta-object #{hara.protocol.data/-meta-object}, hara.reflect.core.delegate/delegate #{hara.reflect.core.query/query-instance}, hara.io.scheduler/scheduler #{hara.concurrent.procedure.data/cache hara.io.scheduler.array/seed-fn hara.io.scheduler/*defaults* hara.data.nested/merge-nil-nested hara.io.scheduler.clock/clock hara.data.nested/merge-nested hara.concurrent.procedure.data/registry hara.component/system hara.io.scheduler.array/initialise}, hara.data.map/update-in-if #{}, hara.common.watch/wrap-mode #{}, hara.common.checks/uuid? #{}, hara.reflect/extract-to-var #{}, hara.string.path/path-vec? #{hara.string.path/path-vec}, hara.io.scheduler/list-instances #{hara.io.scheduler/scheduler hara.io.scheduler/list-tasks}, hara.string.case/camel-case #{hara.common.string/to-meta hara.string.case/re-sub hara.string.case/non-camel-separator-pattern hara.common.string/to-string hara.common.string/from-string}, hara.reflect/class-hierarchy #{}, hara.time/before? #{hara.protocol.time/-to-long}, hara.concurrent.propagate/register-propagator #{}, hara.common.watch/wrap-suppress #{}, hara.object.access/may-coerce #{hara.object.base/meta-object hara.reflect.util/param-arg-match}, hara.data.diff/diff #{hara.data.diff/diff-changes hara.data.diff/diff-new}, hara.string.path/join #{hara.common.string/to-meta hara.common.string/to-string hara.common.string/from-string}, hara.expression/form-eval #{hara.expression/form-fn}, hara.reflect.pretty.primitives/primitive-containers #{hara.reflect.pretty.primitives/primitive-records}, hara.io.watch/watch-callback #{}, hara.data.diff/patch #{hara.data.diff/diff hara.data.map/dissoc-in hara.data.diff/merge-or-replace}, hara.class/ancestor-tree #{}, hara.reflect.pretty.display.filter/has-name? #{hara.common.checks/regex?}, hara.io.scheduler/restart! #{hara.io.scheduler/start! hara.io.scheduler/scheduler hara.io.scheduler/shutdown!}, hara.string/val? #{hara.string/val}, hara.reflect.element.method/to-instance-method #{hara.reflect.hierarchy/origins}, hara.time/milli #{hara.protocol.time/-milli hara.time/system-timezone}, hara.reflect.pretty.classes/class-convert #{hara.reflect.pretty.classes/class-convert-impl}, hara.event.common/new-id #{hara.common.primitives/uuid}, hara.string.case/separate-camel-humps #{hara.string.case/re-sub hara.string.case/hump-pattern}, hara.component/system-augmentations #{}, hara.reflect.element.common/seed #{hara.reflect.element.common/get-declaring-class hara.reflect.element.common/get-modifiers hara.common.string/to-string hara.reflect.element.common/set-accessible hara.reflect.types.modifiers/int-to-modifiers hara.reflect.element.common/add-annotations}, hara.io.watch/run-watcher #{hara.io.watch/process-event hara.io.watch/register-sub-directory hara.io.watch/watcher}, hara.concurrent.procedure.registry/*default-registry* #{hara.concurrent.procedure.data/registry}, hara.concurrent.ova/clone #{hara.concurrent.ova/ova hara.common.watch/copy}, hara.concurrent.ova/insert-fn #{}, hara.event.condition.raise/raise-choose #{hara.event.condition.data/choose-condition}, hara.reflect.core.query/query-class #{hara.reflect.core.query/list-class-elements hara.reflect.common/context-class}, hara.component/array #{hara.data.nested/merge-nested}, hara.object.access/access #{hara.object.util/object-getters hara.object.base/to-data hara.object.access/apply-with-coercion hara.object.util/clojure->java hara.object.util/object-setters hara.reflect/query-class hara.reflect/apply-element}, hara.common/bytes? #{}, hara.concurrent.propagate/cell-state #{}, hara.component/map->ComponentSystem #{hara.component/IComponent hara.component/system-string hara.component/start-system hara.component/-start hara.component/stop-system hara.component/-stop hara.component/->ComponentSystem}, hara.concurrent.procedure/->ProcedureInstance #{hara.concurrent.procedure/map->ProcedureInstance}, hara.reflect.core.extract/val-of #{}, hara.string/re-sub #{}, hara.concurrent.propagate/format-cells #{hara.concurrent.propagate/cell}, hara.concurrent.propagate/link #{hara.concurrent.propagate/register-propagator hara.concurrent.propagate/straight-through hara.concurrent.propagate/propagator}, hara.data/combine-internal #{hara.data/combine-set}, hara.protocol.time/-days #{}, hara.string.path/path-stem-vec? #{hara.string.path/path-stem-vec}, hara.reflect.element.common/element-params-method #{hara.reflect.pretty.classes/class-convert}, hara.data/select-keys-if #{}, hara.protocol.constructor/IConstructor #{hara.protocol.constructor/-construct}, hara.protocol.map/-from-map #{}, hara.reflect.types.modifiers/field-flags #{}, hara.string.path/path-root? #{hara.string.path/path-root}, hara.data.path/flatten-keys #{hara.string.path/join hara.common.checks/hash-map?}, hara.data.map/merge-if #{}, hara.class/best-match #{hara.class/ancestor-tree}, hara.object/enum-values #{}, hara.concurrent.ova/<< #{}, hara.string/hump-pattern #{}, hara.concurrent/notify #{}, hara.concurrent.ova/remove-internal-watch #{hara.concurrent.ova/ova hara.common.hash/hash-label}, hara.component/array? #{}, hara.data/unpatch #{hara.data/diff hara.data/merge-or-replace}, hara.reflect.pretty.primitives/primitive-lu #{hara.reflect.pretty.primitives/primitive-records hara.reflect.pretty.primitives/primitive-combinations}, hara.concurrent.ova/has? #{hara.concurrent.ova/ova hara.concurrent.ova/select}, hara.reflect/query-instance #{}, hara.common.checks/uri? #{}, hara.common.checks/double? #{}, hara.expression/form-apply #{hara.expression/form-fn}, hara.concurrent.notification/dispatch #{hara.common.state/update}, hara.protocol.data/-meta-object #{}, hara.concurrent.procedure.data/->ProcedureCache #{hara.concurrent.procedure.data/cache hara.protocol.state/IStateSet hara.concurrent.procedure.data/map->ProcedureCache hara.data.nested/update-vals-in}, hara.namespace.import/import-namespace #{hara.namespace.import/import-var}, hara.common.primitives/instant #{}, hara.string.path/val? #{hara.string.path/val}, hara.expression/form-prep #{hara.expression/form-require}, hara.component/component? #{hara.component/IComponent}, hara.data.seq/positions #{}, hara.string/non-snake-separator-pattern #{}, hara.class.checks/interface? #{}, hara.event.common/manager #{hara.event.common/new-id}, hara.component/system-constructors #{hara.common.checks/hash-map?}, hara.protocol.time/IInstant #{hara.protocol.time/-month hara.protocol.time/-timezone? hara.protocol.time/-hour hara.protocol.time/-day-of-week hara.protocol.time/-second hara.protocol.time/-year hara.protocol.time/-milli hara.protocol.time/-day hara.protocol.time/-to-long hara.protocol.time/-minute}, hara.reflect.common/*cache* #{}, hara.io.scheduler/list-tasks #{hara.io.scheduler/scheduler}, hara.data/keys-nested #{}, hara.object/object-apply #{}, hara.event.common/match-handlers #{hara.event.common/manager hara.event.common/check-data}, hara.data/diff-new #{}, hara.common.checks/lazy-seq? #{}, hara.time/equal? #{hara.protocol.time/-to-long}, hara.concurrent.ova/smap! #{hara.concurrent.ova/ova hara.concurrent.ova/indices}, hara.event.common/list-handlers #{hara.event.common/manager hara.event.common/check-data}, hara.reflect.core.query/all-class-members #{}, hara.data/key-paths #{}, hara.string/non-camel-separator-pattern #{}, hara.common/T #{}, hara.time/day-of-week #{hara.protocol.time/-day-of-week hara.time/system-timezone}, hara.io.scheduler/running? #{hara.io.scheduler/scheduler hara.component/started?}, hara.reflect.element.field/invoke-static-field #{hara.reflect.util/set-field}, hara.concurrent.notification/notify #{hara.common.hash/hash-label hara.common.watch/add hara.common.watch/remove}, hara.reflect.pretty.display.filter/has-num-params? #{}, hara.string.path/split #{hara.common.string/to-meta hara.common.string/to-string hara.common.string/from-string}, hara.class.checks/protocol? #{}, hara.reflect.hierarchy/is-assignable? #{}, hara.protocol.time/-seconds #{}, hara.extend/extend-all #{}, hara.io.scheduler.clock/clock-loop #{hara.time/milli hara.io.scheduler.clock/clock hara.io.scheduler.tab/to-time-array hara.time/now hara.time/truncate}, hara.expression/load #{hara.expression/load-single}, hara.object/from-data #{hara.object/meta-object}, hara.time/from-long #{hara.time/*default-type* hara.time.common/from-long}, hara.reflect.pretty.args/args-group #{hara.data.map/update-in-if hara.reflect.pretty.args/args-classify hara.reflect.pretty.args/args-convert}, hara.io.scheduler/disable-task #{hara.io.scheduler/scheduler hara.concurrent.ova/smap!}, hara.concurrent.propagate/straight-through #{}, hara.event.condition.util/parse-try-forms #{}, hara.data/update-keys-in #{hara.data/key-paths}, hara.event.common/add-handler #{hara.event.common/new-id hara.event.common/manager hara.event.common/remove-handler}, hara.string/path-stem #{hara.string/path-stem-vec hara.string/join}, hara.data.map/assoc-if #{}, hara.object/object-data #{hara.object/object-apply hara.object/object-getters}, hara.protocol.map/-get-in #{}, hara.reflect.pretty.args/sort-terms #{}, hara.common.checks/bigdec? #{}, hara.protocol.time/-timezone #{}, hara.data/combine #{hara.data/combine-internal hara.data/combine-set hara.data/combine-value}, hara.component/system? #{}, hara.io.scheduler.tab/to-long #{}, hara.reflect/delegate #{}, hara.expression/call-> #{}, hara.object/clojure->java #{}, hara.common.checks/regex? #{}, hara.data/into-if #{}, hara.time/day #{hara.protocol.time/-day hara.time/system-timezone}, hara.concurrent.ova/ova #{hara.concurrent.ova/ova-state hara.common.state/set}, hara.common/NIL #{}, hara.common.hash/hash-label #{}, hara.data/diff-changes #{}, hara.expression.compile/const #{}, hara.data/nest-keys #{}, hara.io.scheduler.clock/->Clock #{hara.component/IComponent hara.io.scheduler.clock/clock-start hara.io.scheduler.clock/clock hara.io.scheduler.clock/clock-stop hara.io.scheduler.clock/map->Clock hara.io.scheduler.clock/clock-stopped? hara.io.scheduler.clock/clock-started?}, hara.data.path/group-keys #{hara.data.path/group-by-set hara.string.path/path-ns}, hara.expression/shorthand-fn-expr #{hara.expression/shorthand-form}, hara.data/unnest-keys #{hara.data/treeify-keys-nested}, hara.data.path/group-by-set #{}, hara.common.state/update #{hara.protocol.state/-update-state}, hara.extend.abstract/protocol-multimethods #{hara.extend.abstract/protocol-multi-form hara.extend.abstract/protocol-default-form}, hara.reflect.pretty.display.sort/sort-fn #{}, hara.component/system-string #{hara.component/IComponent hara.component/array? hara.component/component? hara.component/system? hara.data.record/empty-record}, hara.data/list-ns-keys #{}, hara.reflect.hierarchy/origins #{hara.reflect.hierarchy/has-overridden-method hara.class.inheritance/ancestor-tree}, hara.data/flatten-keys-nested #{hara.data/pathify-keys-nested}, hara.extend.abstract/extend-implementations #{hara.extend.abstract/protocol-implementation}, hara.reflect.hierarchy/methods-with-same-name-and-count #{}, hara.reflect.pretty.display.filter/has-origins? #{}, hara.event.condition.raise/raise-escalate #{hara.data.map/assoc-if hara.event.condition.raise/raise-loop hara.event.common/expand-data}, hara.function.args/varg-count #{}, hara.concurrent.procedure.data/cache #{}, hara.data/dissoc-nested #{}, hara.function.dispatch/call #{}, hara.reflect.pretty.display/first-terms-fn #{}, hara.data.map/dissoc-in #{}, hara.reflect.pretty.display.filter/has-predicate? #{}, hara.common/agent? #{}, hara.concurrent.ova/sort! #{hara.concurrent.ova/ova hara.common.state/get hara.expression.shorthand/get->}, hara.reflect.core.apply/instance-lookup-path #{}, hara.reflect.pretty.display.filter/has-all-params? #{hara.reflect.pretty.classes/class-convert}, hara.reflect.core.apply/refine-lookup #{hara.reflect.types.element/to-element}, hara.concurrent.ova/ova-state #{}, hara.common/promise? #{}, hara.reflect.pretty.primitives/primitive-records #{}, hara.namespace/ns-vars #{}, hara.event.common/map->Manager #{hara.event.common/->Manager}, hara.reflect.core.apply/get-element-lookup #{hara.reflect.common/*cache* hara.reflect.core.apply/refine-lookup hara.reflect.core.apply/object-lookup}, hara.object.base/from-data #{hara.object.base/meta-object hara.protocol.map/-from-map hara.protocol.string/-from-string}, hara.io.scheduler.clock/clock-start #{hara.io.scheduler.clock/clock-loop hara.io.scheduler.clock/clock hara.io.scheduler.clock/clock-stopped? hara.event/signal hara.time/now}, hara.common/long? #{}, hara.reflect.element.multi/find-candidate #{hara.reflect.pretty.classes/class-convert hara.reflect.element.multi/find-field-candidate hara.reflect.types.element/format-element hara.reflect.element.multi/find-method-candidate}, hara.expression.shorthand/check?-> #{hara.expression.shorthand/check-> hara.common.error/suppress}, hara.reflect.element.method/invoke-static-method #{hara.reflect.element.common/throw-arg-exception hara.reflect.element.common/box-args}, hara.string/path-stem-vec? #{hara.string/path-stem-vec}, hara.data.nested/dissoc-nested #{hara.common.checks/hash-map?}, hara.common/hash-label #{}, hara.io.scheduler.array/seed-fn #{hara.concurrent.ova/ova hara.io.scheduler.array/map->TaskArray hara.io.scheduler.array/build-handlers}, hara.io.scheduler.array/map->TaskArray #{hara.io.scheduler.array/->TaskArray}, hara.protocol.watch/-remove-watch #{}, hara.io.scheduler/*defaults* #{hara.time/system-timezone}, hara.data.seq/remove-index #{}, hara.protocol.time/-month #{}, hara.component/system-initialisers #{hara.common.checks/hash-map?}, hara.concurrent.propagate/propagate #{}, hara.common.string/to-meta #{hara.protocol.string/-to-string-meta}, hara.reflect.types.modifiers/method-flags #{}, hara.reflect.pretty.args/select-terms #{}, hara.class.checks/abstract? #{}, hara.reflect.hierarchy/has-method #{}, hara.data.nested/merge-nil-nested #{hara.common.checks/hash-map?}, hara.protocol.string/IString #{hara.protocol.string/-to-string-meta hara.protocol.string/-to-string}, hara.data/group-by-set #{}, hara.reflect.types.modifiers/get-modifiers #{}, hara.concurrent.procedure/max-inputs #{hara.function.args/arg-count hara.function.args/vargs?}, hara.function/vargs? #{}, hara.reflect.core.extract/element-meta #{hara.reflect.pretty.classes/class-convert hara.reflect.types.element/element-params hara.common.string/to-string hara.reflect.core.extract/process-if-single}, hara.data.diff/merge-or-replace #{hara.data.nested/merge-nested hara.common.checks/hash-map?}, hara.component/start-system #{hara.sort.topological/topological-sort hara.component/augmentation-fn hara.component/start}, hara.common/thread? #{}, hara.concurrent.procedure.middleware/wrap-cached #{hara.common.state/update}, hara.concurrent.procedure.middleware/wrap-instance #{}, hara.expression.form/form-fn #{hara.common.error/error hara.expression.form/form-prep}, hara.sort/topological-sort #{hara.sort/top-nodes}, hara.expression/load-single #{hara.expression/form-eval}, hara.namespace.resolve/ns-vars #{}, hara.protocol.watch/-list-watch #{}, hara.object.string-like/extend-stringlike-class #{hara.protocol.data/-meta-object hara.protocol.string/IString hara.protocol.string/-from-string hara.protocol.string/-to-string}, hara.reflect.util/box-arg #{}, hara.expression/applym #{}, hara.string.case/title-case #{hara.string.case/separate-camel-humps hara.common.string/to-string}, hara.reflect.pretty.classes/string->raw #{hara.reflect.pretty.primitives/primitive-convert hara.reflect.pretty.classes/string-array->raw}, hara.io.scheduler.clock/clock #{}, hara.namespace/with-ns #{}, hara.namespace.eval/with-ns #{}, hara.protocol.state/-empty-state #{}, hara.reflect.hierarchy/has-overridden-method #{hara.reflect.hierarchy/is-assignable? hara.reflect.hierarchy/methods-with-same-name-and-count}, hara.function.args/op #{hara.function.args/varg-count hara.function.args/arg-count}, hara.namespace/import #{hara.namespace/import-namespace}, hara.event/manage #{hara.event.condition.util/parse-on-handler-forms hara.event.common/new-id hara.event.common/manager hara.event.condition.util/parse-try-forms hara.event/*issue-optmap* hara.event/*issue-managers* hara.event.condition.util/parse-on-any-handler-forms hara.event.condition.util/is-special-form hara.event.condition.manage/manage-condition hara.event.condition.util/parse-option-forms}, hara.reflect.element.multi/find-field-candidate #{hara.reflect.util/param-arg-match}, hara.common.primitives/class-array #{}, hara.protocol.map/IMap #{hara.protocol.map/-to-map hara.protocol.map/-to-map-meta}, hara.concurrent.ova/smap-indexed! #{hara.concurrent.ova/ova hara.concurrent.ova/indices}, hara.class/interface? #{}, hara.io.watch/event-kinds #{}, hara.event.condition.raise/raise-fail #{hara.event.common/expand-data hara.event.condition.data/exception}, hara.string/non-spear-separator-pattern #{}, hara.reflect.element.method/to-static-method #{}, hara.object.util/object-getters #{hara.reflect/query-instance hara.object.util/java->clojure}, hara.common.error/error #{}, hara.concurrent.propagate/notify-propagators #{}, hara.string/path-vec? #{hara.string/path-vec}, hara.event/uninstall-listener #{hara.event/*signal-manager* hara.event.common/remove-handler}, hara.data/combine-set #{hara.data/combine-value}, hara.expression.form/form-prep #{hara.expression.form/form-require}, hara.common/uuid? #{}, hara.concurrent.procedure.data/->ProcedureRegistry #{hara.protocol.state/IStateSet hara.data.nested/update-vals-in hara.concurrent.procedure.data/map->ProcedureRegistry}, hara.string/path-ns? #{hara.string/path-ns}, hara.protocol.state/IStateSet #{hara.protocol.state/-empty-state hara.protocol.state/-update-state hara.protocol.state/-set-state}, hara.expression.shorthand/shorthand-fn-expr #{hara.expression.shorthand/shorthand-form}, hara.concurrent.procedure/->Procedure #{hara.concurrent.procedure/map->Procedure hara.concurrent.procedure/invoke-procedure}, hara.data.nested/merge-nested #{hara.common.checks/hash-map?}, hara.concurrent/wait-on #{hara.concurrent/notify}, hara.reflect.element.common/get-declaring-class #{}, hara.reflect.util/is-congruent #{hara.reflect.util/param-arg-match}, hara.object/java->clojure #{}, hara.protocol.watch/-add-watch #{}, hara.reflect.types.element/format-element #{}, hara.component/system-dependencies #{}, hara.reflect.pretty.display.filter/filter-terms-fn #{hara.reflect.pretty.display.filter/has-name? hara.reflect.pretty.display.filter/has-num-params? hara.reflect.pretty.display.filter/has-origins? hara.reflect.pretty.display.filter/has-predicate? hara.reflect.pretty.display.filter/has-all-params? hara.reflect.pretty.display.filter/has-any-params? hara.reflect.pretty.display.filter/filter-by hara.reflect.pretty.display.filter/has-modifier? hara.reflect.pretty.display.filter/has-type? hara.reflect.pretty.display.filter/has-params?}, hara.reflect.pretty.classes/type->raw #{hara.reflect.pretty.primitives/primitive-convert hara.common.string/to-string}, hara.concurrent.notification/wait-on #{hara.concurrent.notification/notify}, hara.extend.abstract/protocol-extend-type-function #{hara.extend.abstract/protocol-extend-type-wrappers}, hara.protocol.time/IPeriod #{hara.protocol.time/-days hara.protocol.time/-seconds hara.protocol.time/-years hara.protocol.time/-minutes hara.protocol.time/-duration hara.protocol.time/-millis hara.protocol.time/-months hara.protocol.time/-hours}, hara.time/minute #{hara.time/system-timezone hara.protocol.time/-minute}, hara.data.combine/decombine #{hara.expression.shorthand/check->}, hara.data.diff/diff-changes #{hara.common.checks/hash-map?}, hara.common.primitives/uri #{}, hara.reflect.element.multi/to-element-map-path #{}, hara.expression.shorthand/call-> #{hara.function.dispatch/call hara.namespace.resolve/resolve-ns hara.common.error/suppress}, hara.string/lower-case #{hara.string/separate-camel-humps}, hara.io.scheduler.clock/clock-stop #{hara.io.scheduler.clock/clock hara.io.scheduler.clock/clock-stopped? hara.event/signal}, hara.data.map/unique #{}, hara.concurrent.propagate/cell #{hara.concurrent.propagate/cell-state hara.concurrent.propagate/nothing}, hara.concurrent.procedure.data/registry #{}, hara.class.inheritance/ancestor-list #{}, hara.common/instant? #{}, hara.protocol.time/-timezone? #{}, hara.object/meta-object #{}, hara.data.map/merge-nil #{}, hara.data.complex/merges-nested #{hara.data.combine/combine hara.common.checks/hash-map?}, hara.event.condition.raise/raise-loop #{hara.event.condition.raise/raise-choose hara.event.common/match-handlers hara.event.condition.raise/raise-escalate hara.event.condition.raise/raise-fail hara.event.condition.raise/raise-unhandled hara.event.condition.raise/raise-catch}, hara.common.primitives/uuid #{hara.common.error/error hara.common.checks/bytes?}, hara.component/-start #{}, hara.function.args/arg-count #{}, hara.event/clear-listeners #{hara.event.common/manager hara.event/*signal-manager*}, hara.concurrent.procedure.middleware/wrap-id #{}, hara.event/*issue-optmap* #{}, hara.common.state/dispatch #{hara.common.state/update}, hara.reflect.element.common/get-modifiers #{}, hara.concurrent.latch/unlatch #{hara.common.hash/hash-label hara.common.watch/remove}, hara.reflect.pretty.display.filter/has-any-params? #{hara.reflect.pretty.classes/class-convert}, hara.concurrent.ova/selectv #{hara.concurrent.ova/ova hara.expression.shorthand/check?-> hara.common.error/suppress}, hara.io.scheduler/stopped? #{hara.io.scheduler/scheduler hara.component/stopped?}, hara.common.checks/bigint? #{}, hara.common.checks/boolean? #{}, hara.component/->ComponentArray #{hara.component/IComponent hara.component/array? hara.component/component? hara.component/system? hara.component/-start hara.data.record/empty-record hara.component/-stop hara.component/stop-array hara.component/start-array}, hara.concurrent.propagate/unlink #{hara.concurrent.propagate/deregister-propagator hara.common.state/set}, hara.io.scheduler.tab/match-array? #{hara.io.scheduler.tab/match-element?}, hara.concurrent.ova/delete-internal-watches #{hara.concurrent.ova/remove-internal-watch hara.concurrent.ova/ova}, hara.data.complex/assocs #{hara.data.combine/combine}, hara.io.watch/process-event #{hara.io.watch/kind-lookup hara.io.watch/watcher}, hara.concurrent.procedure.data/map->ProcedureCache #{hara.concurrent.procedure.data/->ProcedureCache hara.concurrent.procedure.data/cache hara.protocol.state/IStateSet hara.data.nested/update-vals-in}, hara.event/list-listeners #{hara.event.common/list-handlers hara.event/*signal-manager*}, hara.common/type-checker #{}, hara.io.scheduler/kill-instances #{hara.io.scheduler/scheduler hara.concurrent.procedure.registry/kill hara.concurrent.procedure.registry/list-instances}, hara.event/choose #{}, hara.event/*issue-managers* #{}, hara.string/path-stem? #{hara.string/path-stem}, hara.common/error #{}, hara.data.complex/gets-in #{hara.data.complex/gets-in-loop}, hara.reflect.element.multi/elegible-candidates #{hara.reflect.util/param-arg-match}, hara.common.checks/atom? #{}, hara.extend.abstract/protocol-implementation #{hara.extend.abstract/protocol-basis hara.extend.abstract/protocol-implementation-function hara.extend.abstract/protocol-ns}, hara.event.condition.util/sp-forms #{}, hara.reflect.types.element/make-invoke-element-form #{hara.reflect.types.element/invoke-element}, hara.time/year #{hara.protocol.time/-year hara.time/system-timezone}, hara.reflect.element.multi/multi-element #{hara.reflect.element.multi/get-name hara.reflect.types.element/element}, hara.common.watch/process-options #{hara.common.watch/wrap-mode hara.common.watch/wrap-suppress hara.function.args/arg-check hara.common.watch/wrap-diff hara.common.watch/wrap-select}, hara.data/dissocs-in #{hara.data/dissocs}, hara.string/spear-case #{hara.string/non-spear-separator-pattern hara.string/separate-camel-humps}, hara.object.map-like/generic-map #{hara.object.util/object-getters hara.object.base/to-data hara.object.util/object-apply}, hara.reflect.core.class/class-info #{hara.reflect.element.common/seed hara.reflect.common/context-class}, hara.object.base/to-data #{hara.protocol.data/-meta-object hara.protocol.map/-to-map hara.protocol.string/-to-string hara.protocol.data/-to-data}, hara.time/month #{hara.protocol.time/-month hara.time/system-timezone}, hara.function/msg #{hara.function/call}, hara.common.primitives/T #{}, hara.class.inheritance/ancestor-tree #{}, hara.data/merges-nested #{hara.data/combine}, hara.time/*default-type* #{}, hara.event/fail #{}, hara.event/deflistener #{hara.event/install-listener hara.event.common/checker-form hara.event.common/handler-form}, hara.string/path-stem-vec #{hara.string/split}, hara.protocol.time/-hour #{}, hara.function.args/arg-check #{hara.function.args/varg-count hara.function.args/arg-count}, hara.data/assoc-in-if #{}, hara.expression/check #{hara.expression/get->}, hara.data.combine/combine-select #{hara.expression.shorthand/eq->}, hara.data/contains-ns-key? #{}, hara.event.condition.util/parse-on-any-handler-forms #{hara.event.common/handler-form}, hara.class.checks/multimethod? #{}, hara.protocol.time/-day-of-week #{}, hara.extend/extend-abstract #{}, hara.common/ref? #{}, hara.protocol.map/ILookup #{hara.protocol.map/-get-in hara.protocol.map/-get}, hara.reflect.types.element/invoke-element #{}, hara.data.map/assoc-nil #{}, hara.concurrent.propagate/->Propagator #{hara.concurrent.propagate/IPropagate hara.concurrent.propagate/format-cells hara.concurrent.propagate/propagate hara.concurrent.propagate/propagation-transfer hara.common.checks/iref?}, hara.string.case/snake-case #{hara.string.case/separate-camel-humps hara.common.string/to-meta hara.string.case/non-snake-separator-pattern hara.common.string/to-string hara.common.string/from-string}, hara.common.checks/promise? #{}, hara.common.checks/agent? #{}, hara.component/stop-system #{hara.data.map/assoc-if hara.sort.topological/topological-sort hara.component/stop hara.component/de-augmentation-fn}, hara.event.condition.util/is-special-form #{hara.event.condition.util/sp-forms}, hara.namespace/import-var #{}, hara.sort.topological/topological-sort #{hara.sort.topological/top-nodes}, hara.namespace.resolve/resolve-ns #{hara.common.error/suppress}, hara.common.primitives/NIL #{}, hara.io.watch/register-sub-directory #{hara.io.watch/event-kinds hara.io.watch/watcher}, hara.data/assocs #{hara.data/combine}, hara.data.nested/clean-nested #{hara.common.checks/hash-map? hara.expression.shorthand/check-> hara.common.error/suppress}, hara.concurrent.latch/latch-fn #{hara.common.state/set}, hara.protocol.time/-second #{}, hara.event.common/expand-data #{hara.common.checks/hash-map?}, hara.data/update-vals-in #{hara.data/key-paths}, hara.concurrent.ova/append! #{hara.concurrent.ova/ova hara.concurrent.ova/concat!}, hara.data/gets-in #{}, hara.concurrent.procedure.registry/kill #{hara.common.checks/thread? hara.concurrent.procedure.registry/*default-registry* hara.common.state/update hara.data.map/dissoc-in hara.event/signal hara.concurrent.procedure.registry/get-instance}, hara.event/install-listener #{hara.event.common/add-handler hara.event/*signal-manager*}, hara.concurrent.procedure/map->ProcedureInstance #{hara.concurrent.procedure/->ProcedureInstance}, hara.namespace.eval/with-temp-ns #{hara.namespace.eval/with-ns}, hara.reflect.types.modifiers/modifiers-to-int #{hara.reflect.types.modifiers/field-flags hara.reflect.types.modifiers/method-flags hara.reflect.types.modifiers/flags}, hara.concurrent.ova/standardise-opts #{}, hara.reflect.pretty.primitives/primitive-classes #{hara.reflect.pretty.primitives/primitive-records}, hara.string.path/path-ns? #{hara.string.path/path-ns}, hara.data.record/empty-record #{}, hara.namespace/with-temp-ns #{hara.namespace/with-ns}, hara.string.path/contains #{hara.common.string/to-string}, hara.data/treeify-keys #{}, hara.event.condition.manage/manage-condition #{hara.event.condition.manage/manage-apply}, hara.concurrent.procedure/map->Procedure #{hara.concurrent.procedure/->Procedure hara.concurrent.procedure/invoke-procedure}, hara.common.pretty/prettify-string #{}, hara.concurrent.ova/select #{hara.concurrent.ova/ova hara.concurrent.ova/selectv}, hara.concurrent.ova/!! #{hara.concurrent.ova/smap! hara.concurrent.ova/ova}, hara.protocol.string/-from-string #{}, hara.time.util-calendar/calendar #{}, hara.data.combine/combine-value #{hara.data.combine/combine-select}, hara.reflect/extract-to-ns #{hara.reflect/extract-to-var}, hara.protocol.map/-to-map #{}, hara.io.scheduler/kill-all #{hara.io.scheduler/scheduler hara.io.scheduler/list-tasks hara.concurrent.procedure.registry/kill hara.concurrent.procedure.registry/list-instances}, hara.expression/check?-> #{hara.expression/check->}, hara.concurrent.procedure/*default-cache* #{hara.concurrent.procedure.data/cache}, hara.data.complex/dissocs-in #{hara.data.complex/dissocs-in-filtered hara.data.complex/dissocs}, hara.protocol.data/IData #{hara.protocol.data/-to-data}, hara.protocol.time/-years #{}, hara.reflect.element.field/throw-arg-exception #{hara.reflect.pretty.classes/class-convert hara.reflect.element.field/arg-params hara.reflect.common/context-class}, hara.protocol.time/IRegion #{hara.protocol.time/-timezone}, hara.io.scheduler.tab/valid-tab? #{hara.io.scheduler.tab/parse-tab hara.common.error/suppress}, hara.data.complex/dissocs-in-filtered #{hara.expression.shorthand/check?-> hara.common.error/error hara.data.complex/dissocs-in hara.common.checks/hash-map?}, hara.io.scheduler/kill-instance #{hara.io.scheduler/scheduler hara.concurrent.procedure.registry/kill}, hara.reflect.common/combinations #{}, hara.event/raise #{hara.event.condition.raise/raise-loop hara.event/*issue-optmap* hara.event/*issue-managers* hara.event.condition.util/is-special-form hara.event/default hara.event.condition.data/issue hara.event/signal hara.event.condition.util/parse-option-forms hara.event.condition.util/parse-default-form}, hara.data.combine/combine-internal #{hara.data.combine/combine-set}, hara.data.complex/dissocs #{hara.data.combine/decombine}, hara.data.path/unnest-keys #{hara.data.map/dissoc-in hara.data.path/treeify-keys-nested}, hara.concurrent.ova/add-internal-watch #{hara.concurrent.ova/ova hara.common.hash/hash-label hara.concurrent.ova/internal-watch-fn}, hara.event.common/checker-form #{hara.common.primitives/T}, hara.event.condition.data/choose-condition #{}, hara.io.scheduler.clock/map->Clock #{hara.component/IComponent hara.io.scheduler.clock/->Clock hara.io.scheduler.clock/clock-start hara.io.scheduler.clock/clock hara.io.scheduler.clock/clock-stop hara.io.scheduler.clock/clock-stopped? hara.io.scheduler.clock/clock-started?}, hara.reflect.types.element/element-params #{}, hara.protocol.state/-update-state #{}, hara.object.util/java->clojure #{hara.string.case/spear-case}, hara.protocol.map/-to-map-meta #{}, hara.reflect.core.apply/assignable? #{}, hara.data.path/nest-keys #{}, hara.protocol.string/-to-string-meta #{}, hara.string/path-vec #{hara.string/split}, hara.concurrent.notification/alter-on #{hara.concurrent.notification/dispatch hara.concurrent.notification/wait-on}, hara.time.common/from-long #{}, hara.data.complex/merges #{hara.data.combine/combine}, hara.reflect.pretty.primitives/primitive-convert #{hara.reflect.pretty.primitives/primitive-lu hara.reflect.pretty.primitives/primitive-reps}, hara.concurrent/latch #{hara.concurrent/latch-fn}, hara.io.watch/add-io-watch #{hara.io.watch/watch-callback hara.protocol.watch/-remove-watch hara.io.watch/*filewatchers* hara.io.watch/start-watcher hara.io.watch/watcher}, hara.component/stop #{hara.component/-stop}, hara.extend.abstract/map-walk-submap #{}, hara.extend.abstract/protocol-all #{hara.extend.abstract/protocol-multimethods hara.extend.abstract/protocol-basis hara.extend.abstract/protocol-extend-type}, hara.string/camel-case #{hara.string/re-sub hara.string/non-camel-separator-pattern}, hara.data/dissoc-in #{}, hara.reflect.core.query/list-class-elements #{hara.reflect.core.query/all-class-members hara.reflect.pretty.args/args-group hara.reflect.types.element/to-element hara.reflect.pretty.display/display}, hara.concurrent.procedure/defprocedure #{hara.concurrent.procedure/procedure}, hara.data.complex/assocs-in-filtered #{hara.expression.shorthand/check?-> hara.common.error/error hara.data.combine/combine hara.common.checks/hash-map? hara.data.complex/assocs-in}, hara.common/class-array #{}, hara.io.scheduler.array/->TaskArray #{hara.io.scheduler.array/map->TaskArray}, hara.common.checks/long? #{}, hara.data/merge-nested #{}, hara.reflect.element.method/to-pre-element #{hara.reflect.element.method/to-instance-method hara.reflect.element.common/seed hara.reflect.element.method/to-static-method}, hara.protocol.time/-minutes #{}, hara.io.watch/list-io-watch #{hara.io.watch/*filewatchers*}, hara.io.scheduler.clock/clock-stopped? #{hara.io.scheduler.clock/clock}, hara.io.scheduler.tab/parse-tab-group #{hara.io.scheduler.tab/parse-tab-element}, hara.reflect.pretty.display/select-terms-fn #{}, hara.time/to-map #{hara.protocol.time/-timezone hara.protocol.time/-month hara.protocol.time/-hour hara.protocol.time/-second hara.protocol.time/-year hara.time.common/timezone? hara.protocol.time/-milli hara.protocol.time/-day hara.protocol.time/-to-long hara.time/system-timezone hara.protocol.time/-minute}, hara.concurrent.procedure.registry/list-instances #{hara.concurrent.procedure.registry/*default-registry*}, hara.string.path/path-stem? #{hara.string.path/path-stem}, hara.namespace.import/import-var #{}, hara.expression.load/load-single #{hara.expression.form/form-eval}, hara.data.nested/update-vals-in #{hara.data.nested/key-paths}, hara.concurrent/alter-on #{hara.concurrent/wait-on hara.concurrent/dispatch}, hara.io.watch/pattern #{}, hara.concurrent.procedure/invoke-procedure #{hara.concurrent.procedure/max-inputs hara.concurrent.procedure.middleware/wrap-cached hara.concurrent.procedure.middleware/wrap-instance hara.data.nested/merge-nested hara.concurrent.procedure.middleware/wrap-id hara.concurrent.procedure/map->ProcedureInstance hara.concurrent.procedure.middleware/wrap-registry hara.concurrent.procedure.middleware/wrap-timing hara.concurrent.procedure/invoke-base hara.time/now hara.concurrent.procedure.middleware/wrap-mode hara.concurrent.procedure/procedure hara.concurrent.procedure.middleware/wrap-interrupt}, hara.expression.form/form-apply #{hara.expression.form/form-fn}, hara.concurrent.procedure.middleware/wrap-registry #{hara.common.state/update hara.data.map/dissoc-in}, hara.string.case/re-sub #{}, hara.object.access/apply-with-coercion #{hara.object.access/may-coerce}, hara.expression/shorthand-form #{}, hara.event.condition.manage/manage-apply #{}, hara.string/separate-camel-humps #{hara.string/re-sub hara.string/hump-pattern}, hara.concurrent.ova/init! #{hara.concurrent.ova/ova hara.concurrent.ova/empty! hara.common.state/set}, hara.common.checks/instant? #{}, hara.data/group-keys #{hara.data/group-by-set}, hara.data/merges #{hara.data/combine}, hara.concurrent.ova/!> #{hara.concurrent.ova/smap! hara.concurrent.ova/ova}, hara.reflect.types.modifiers/flags #{}, hara.event.common/->Manager #{hara.event.common/map->Manager}, hara.reflect.element.field/invoke-instance-field #{hara.reflect.util/box-arg hara.reflect.util/set-field}, hara.io.scheduler.tab/*- #{}, hara.protocol.time/-year #{}, hara.reflect.common/all-subsets #{hara.reflect.common/combinations}, hara.component/stopped? #{hara.component/started? hara.component/-stopped?}, hara.component/-stop #{}, hara.concurrent.ova/->Ova #{hara.concurrent.ova/get-filtered hara.concurrent.ova/remove-internal-watch hara.concurrent.ova/ova hara.protocol.state/IStateSet hara.common.watch/process-options hara.concurrent.ova/standardise-opts hara.concurrent.ova/add-internal-watch hara.protocol.watch/IWatch hara.common.state/empty hara.protocol.state/IStateGet}, hara.io.watch/map->Watcher #{hara.io.watch/->Watcher}, hara.data/merge-nil-nested #{}, hara.data.path/treeify-keys-nested #{hara.string.path/split hara.data.nested/merge-nested hara.common.checks/hash-map?}, hara.event.condition.raise/raise-unhandled #{hara.event.condition.raise/raise-choose hara.event.condition.raise/default-unhandled-fn}, hara.io.scheduler/simulate #{hara.io.scheduler/scheduler hara.time/from-long hara.component/stop hara.io.scheduler.tab/to-time-array hara.component/start hara.time/to-long}, hara.concurrent.ova/map-indexed! #{hara.concurrent.ova/ova}, hara.event/default #{}, hara.extend.abstract/protocol-basis #{}, hara.protocol.time/-duration #{}, hara.common/uri #{}, hara.common/double? #{}, hara.expression/form-fn #{hara.expression/form-prep}, hara.data/update-in-if #{}, hara.component/started? #{hara.component/-started?}, hara.io.watch/stop-watcher #{hara.io.watch/watcher}, hara.object.map-like/extend-maplike-class #{hara.protocol.map/-from-map hara.protocol.data/-meta-object hara.protocol.map/IMap hara.object.map-like/generic-map hara.protocol.map/-to-map}, hara.protocol.map/-get #{}, hara.data/clean-nested #{}, hara.reflect.core.extract/extract-to-var #{hara.reflect.core.query/query-class hara.reflect.core.extract/element-meta}, hara.protocol.string/-to-string #{}, hara.data.path/contains-ns-key? #{hara.string.path/path-ns?}, hara.namespace/import-namespace #{hara.namespace/import-var}, hara.function/call #{}, hara.expression.form/form-require #{}, hara.common/uuid #{hara.common/bytes? hara.common/error}, hara.reflect.types.element/to-element #{}, hara.expression/check-> #{hara.expression/check hara.expression/check-all}, hara.concurrent.ova/empty! #{hara.concurrent.ova/ova hara.common.watch/clear hara.common.state/empty}, hara.reflect.pretty.display.filter/filter-by #{}, hara.concurrent.propagate/deregister-propagator #{}, hara.io.watch/->Watcher #{hara.io.watch/map->Watcher}, hara.string.case/non-snake-separator-pattern #{}, hara.reflect/class-info #{}, hara.expression.compile/applym #{}, hara.data/assoc-if #{}, hara.common.primitives/F #{}, hara.component/system #{hara.component/system-augmentations hara.component/array hara.component/system-constructors hara.component/system-initialisers hara.component/system-dependencies hara.component/system-exposes}, hara.string.case/hump-pattern #{}, hara.common.watch/clear #{hara.common.watch/list hara.common.watch/remove}, hara.data.map/into-if #{}, hara.component/system-exposes #{}, hara.common.watch/add #{hara.protocol.watch/-add-watch}, hara.object/extend-maplike #{hara.object.map-like/extend-maplike-class}, hara.extend.all/extend-entry #{hara.extend.all/extend-single}, hara.common.watch/list #{hara.protocol.watch/-list-watch}, hara.object/object-getters #{hara.object/java->clojure}, hara.io.watch/*defaults* #{}, hara.protocol.data/-to-data #{}, hara.event.condition.data/exception #{hara.event.condition.data/issue}, hara.class/multimethod? #{}, hara.common/ideref? #{}, hara.data.map/select-keys-if #{}, hara.data.path/pathify-keys-nested #{hara.common.checks/hash-map?}, hara.expression/fn-> #{hara.expression/shorthand-fn-expr}, hara.reflect.element.multi/to-element-array #{}, hara.data/merge-nil #{}, hara.common.checks/type-checker #{}, hara.common/atom? #{}, hara.common/iref? #{}, hara.component/augmentation-fn #{}, hara.event.condition.data/issue #{hara.event.common/new-id hara.event.common/expand-data}, hara.extend.abstract/protocol-implementation-function #{hara.extend.abstract/protocol-extend-type-wrappers}, hara.string/path-ns #{hara.string/path-vec hara.string/join}, hara.concurrent.ova/delete-internal-objs #{hara.concurrent.ova/ova hara.concurrent.ova/indices}, hara.common.state/set #{hara.protocol.state/-set-state}, hara.string.case/non-camel-separator-pattern #{}, hara.object/extend-stringlike #{hara.object.string-like/extend-stringlike-class}, hara.data.combine/combine #{hara.data.combine/combine-value hara.data.combine/combine-internal hara.data.combine/combine-set hara.expression.shorthand/eq->}, hara.io.scheduler/enable-task #{hara.io.scheduler/scheduler hara.concurrent.ova/smap!}, hara.expression/get-> #{hara.expression/call->}, hara.io.scheduler.tab/to-time-array #{hara.time/day-of-week hara.time/day hara.time/minute hara.time/year hara.time/month hara.time/hour hara.time/system-timezone hara.time/second}, hara.string.path/path-vec #{hara.string.path/split}, hara.event.common/handler-form #{hara.common.checks/hash-map?}, hara.time.common/timezone? #{}, hara.common/bigint? #{}, hara.data.map/assoc-in-nil #{}, hara.common/suppress #{}, hara.io.scheduler/get-task #{hara.io.scheduler/scheduler hara.concurrent.ova/select}, hara.data.diff/diff-new #{hara.common.checks/hash-map?}, hara.common.state/get #{hara.protocol.state/-get-state}, hara.concurrent.propagate/propagator-state #{}, hara.concurrent/unlatch #{}, hara.extend.all/extend-all #{hara.extend.all/extend-entry}, hara.io.scheduler/create #{hara.io.scheduler/scheduler}, hara.io.scheduler.tab/match-element? #{}, hara.data/diff #{hara.data/diff-new hara.data/diff-changes}, hara.component/de-augmentation-fn #{}, hara.object/object-setters #{hara.object/java->clojure}, hara.concurrent.ova/split #{hara.concurrent.ova/clone hara.concurrent.ova/ova hara.concurrent.ova/remove! hara.concurrent.ova/filter!}, hara.function/varg-count #{}, hara.concurrent.propagate/CellProtocol #{hara.concurrent.propagate/register-propagator hara.concurrent.propagate/notify-propagators hara.concurrent.propagate/cell hara.concurrent.propagate/deregister-propagator}, hara.event/escalate #{hara.event.condition.util/is-special-form hara.event.condition.util/parse-option-forms hara.event.condition.util/parse-default-form}, hara.reflect.pretty.args/args-classify #{hara.reflect.pretty.args/sort-terms hara.common.checks/regex? hara.reflect.pretty.args/select-terms hara.common.checks/hash-map?}, hara.time.common/truncate #{}, hara.event/signal #{hara.event.common/match-handlers hara.event.common/expand-data hara.event/*signal-manager*}, hara.protocol.time/-milli #{}, hara.reflect.element.multi/find-method-candidate #{hara.reflect.element.multi/elegible-candidates}, hara.expression.form/form-eval #{hara.expression.form/form-fn}, hara.data/assocs-in-filtered #{hara.data/combine hara.data/assocs-in}, hara.reflect.util/param-arg-match #{}, hara.protocol.watch/IWatch #{hara.protocol.watch/-remove-watch hara.protocol.watch/-list-watch hara.protocol.watch/-add-watch}, hara.component/-stopped? #{}, hara.component/stop-array #{hara.component/stop}, hara.reflect.element.common/throw-arg-exception #{}, hara.common.checks/ref? #{}, hara.common.primitives/queue #{}, hara.class/ancestor-list #{}, hara.concurrent.propagate/nothing? #{hara.concurrent.propagate/nothing}, hara.component/->ComponentSystem #{hara.component/IComponent hara.component/map->ComponentSystem hara.component/system-string hara.component/start-system hara.component/-start hara.component/stop-system hara.component/-stop}, hara.common.watch/set #{hara.common.watch/add hara.common.watch/list}, hara.common/boolean? #{}, hara.event/*signal-manager* #{hara.event.common/manager}, hara.protocol.time/-millis #{}, hara.extend/extend-implementations #{}, hara.concurrent.procedure/*default-settings* #{hara.concurrent.procedure.registry/*default-registry* hara.concurrent.procedure/*default-cache* hara.time/system-timezone}, hara.protocol.constructor/-construct #{}, hara.expression.shorthand/shorthand-form #{}, hara.concurrent.procedure.data/map->ProcedureRegistry #{hara.concurrent.procedure.data/->ProcedureRegistry hara.protocol.state/IStateSet hara.data.nested/update-vals-in}, hara.reflect.core.class/class-hierarchy #{hara.class.inheritance/ancestor-tree hara.reflect.common/context-class}, hara.extend.abstract/protocol-multi-form #{hara.extend.abstract/map-walk}, hara.object/to-data #{}, hara.protocol.state/-get-state #{}, hara.object.util/clojure->java #{hara.string.case/camel-case}, hara.data.path/treeify-keys #{hara.string.path/split}, hara.object.util/object-data #{hara.object.util/object-getters hara.object.util/object-apply}, hara.sort/top-nodes #{}, hara.common.watch/wrap-diff #{}, hara.reflect.core.apply/instance-lookup #{hara.reflect.core.apply/instance-lookup-path hara.reflect.core.apply/assignable? hara.reflect.core.query/all-instance-elements}, hara.protocol.time/-day #{}, hara.common.string/to-string #{hara.protocol.string/-to-string}, hara.reflect.core.apply/object-lookup #{hara.reflect.core.apply/instance-lookup}, hara.string.path/path-ns #{hara.string.path/join hara.string.path/path-vec}, hara.reflect.core.extract/process-if-single #{}, hara.extend.abstract/map-walk #{hara.extend.abstract/map-walk-submap hara.common.checks/hash-map?}, hara.io.watch/event-lookup #{hara.io.watch/event-kinds hara.io.watch/event-types}, hara.concurrent/latch-fn #{}, hara.class/protocol? #{}, hara.concurrent.propagate/with-concurrent #{}, hara.reflect.core.apply/apply-element #{hara.reflect.core.apply/get-element-lookup hara.reflect.common/context-class}, hara.data/gets #{}, hara.expression.shorthand/fn-> #{hara.expression.shorthand/shorthand-fn-expr}, hara.expression.shorthand/get-> #{hara.function.dispatch/call hara.expression.shorthand/call-> hara.common.error/suppress}, hara.io.scheduler.array/build-handlers #{hara.io.scheduler.tab/parse-tab hara.concurrent.procedure/procedure}, hara.function.args/vargs? #{}, hara.reflect.element.field/patch-field #{}, hara.protocol.time/-to-long #{}, hara.string/title-case #{hara.string/separate-camel-humps}, hara.reflect.pretty.classes/raw->string #{hara.reflect.pretty.primitives/primitive-convert hara.reflect.pretty.classes/raw-array->string}, hara.concurrent.ova/indices #{hara.concurrent.ova/ova hara.expression.shorthand/check?-> hara.common.error/suppress}, hara.reflect.pretty.primitives/primitive-combinations #{hara.reflect.common/combinations hara.reflect.pretty.primitives/primitive-reps}, hara.expression/form-require #{}, hara.event.common/check-data #{hara.common.checks/hash-map?}, hara.extend.all/extend-single #{}, hara.concurrent.ova/concat! #{hara.concurrent.ova/ova}, hara.reflect.element.common/format-element-method #{hara.reflect.pretty.classes/class-convert}, hara.extend.abstract/protocol-default-form #{hara.extend.abstract/map-walk}, hara.common.state/empty #{hara.protocol.state/-empty-state}, hara.reflect.element.common/IElement #{hara.reflect.element.common/get-declaring-class hara.reflect.element.common/get-modifiers}, hara.component/start-array #{hara.component/start}, hara.reflect.pretty.classes/string-array->raw #{hara.reflect.pretty.primitives/primitive-convert}, hara.concurrent.procedure.middleware/wrap-timing #{hara.time/now}, hara.data.combine/combine-set #{hara.data.combine/combine-value}, hara.function.dispatch/msg #{hara.function.dispatch/call}, hara.event.condition.raise/raise-catch #{hara.event.condition.data/catch-condition}, hara.io.watch/*filewatchers* #{}, hara.expression/check-all #{hara.expression/check}, hara.io.scheduler.array/initialise #{hara.io.scheduler.tab/match-array? hara.concurrent.ova/map!}, hara.protocol.state/IStateGet #{hara.protocol.state/-get-state}, hara.data/unique #{}, hara.reflect.pretty.classes/class-convert-impl #{}, hara.data.diff/unpatch #{hara.data.diff/diff hara.data.map/dissoc-in hara.data.diff/merge-or-replace}, hara.io.watch/event-types #{}, hara.object/may-coerce #{hara.object.base/meta-object hara.object/from-data}, hara.object.enum/enum-values #{hara.reflect/query-class}, hara.data.path/flatten-keys-nested #{hara.string.path/join hara.data.path/pathify-keys-nested hara.data.nested/update-keys-in}, hara.object/access #{hara.object.base/to-data hara.object/apply-with-coercion}, hara.concurrent.propagate/propagation-transfer #{hara.concurrent.propagate/nothing? hara.common.error/suppress hara.concurrent.propagate/nothing}, hara.string.case/non-spear-separator-pattern #{}, hara.event/continue #{}, hara.data.path/list-ns-keys #{hara.string.path/path-ns}, hara.concurrent.propagate/->Cell #{hara.concurrent.propagate/register-propagator hara.concurrent.propagate/propagate hara.concurrent.propagate/notify-propagators hara.protocol.state/IStateSet hara.concurrent.propagate/cell hara.concurrent.propagate/deregister-propagator hara.common.state/set hara.concurrent.propagate/CellProtocol hara.protocol.state/-set-state hara.common.checks/iref?}, hara.event.condition.util/parse-option-forms #{}, hara.object/apply-with-coercion #{hara.object/may-coerce}, hara.event.common/remove-handler #{hara.data.seq/positions hara.event.common/manager hara.data.seq/remove-index}, hara.io.scheduler/trigger! #{hara.io.scheduler/scheduler hara.io.scheduler/get-task hara.time/now}, hara.concurrent.procedure/invoke-base #{}, hara.reflect.pretty.classes/class-reps #{}, hara.reflect.pretty.display.filter/has-modifier? #{}, hara.reflect.pretty.primitives/primitive-reps #{}, hara.data/merge-if #{}, hara.data/decombine #{}, hara.protocol.state/-set-state #{}, hara.string/val #{hara.string/split}, hara.function/op #{hara.function/varg-count hara.function/arg-count}, hara.common.checks/ideref? #{}, hara.time.common/from-map #{}, hara.protocol.time/-months #{}, hara.data.nested/unique-nested #{hara.common.checks/hash-map?}, hara.io.scheduler.tab/parse-tab #{hara.common.error/error hara.io.scheduler.tab/parse-tab-group hara.io.scheduler.tab/SCHEDULE-ELEMENTS}, hara.reflect.pretty.display.filter/has-type? #{hara.reflect.pretty.classes/class-convert}, hara.expression/const #{}, hara.reflect.element.common/box-args #{hara.reflect.util/box-arg hara.reflect.element.common/throw-arg-exception}, hara.common.watch/remove #{hara.protocol.watch/-remove-watch}, hara.concurrent.ova/delete-indices #{hara.concurrent.ova/ova hara.concurrent.ova/delete-internal-watches hara.concurrent.ova/delete-internal-objs hara.common.state/get}, hara.component/start #{hara.component/-start}, hara.common.checks/bytes? #{}, hara.string.path/path-stem #{hara.string.path/path-stem-vec hara.string.path/join}, hara.concurrent/dispatch #{}, hara.time/now #{hara.time/*default-type* hara.time.common/from-long hara.time/system-timezone}, hara.object/enum? #{}, hara.concurrent.propagate/propagator #{hara.concurrent.propagate/straight-through hara.concurrent.propagate/propagator-state}, hara.concurrent.ova/remove! #{hara.concurrent.ova/ova hara.concurrent.ova/indices hara.concurrent.ova/delete-indices}, hara.io.scheduler/stop! #{hara.io.scheduler/scheduler hara.component/stop}, hara.reflect.element.common/set-accessible #{hara.reflect.element.common/override}, hara.data/merge-or-replace #{}, hara.reflect.core.delegate/->Delegate #{}, hara.string.case/lower-case #{hara.string.case/separate-camel-humps hara.common.string/to-string}, hara.string.path/path-root #{hara.string.path/path-vec}, hara.common.checks/hash-map? #{}, hara.time/after? #{hara.protocol.time/-to-long}, hara.event.condition.raise/default-unhandled-fn #{hara.event.condition.data/exception}, hara.object.util/object-apply #{hara.data.map/assoc-if hara.event/raise}, hara.common.watch/wrap-select #{hara.expression.shorthand/get->}, hara.time/truncate #{hara.time.common/truncate hara.time/system-timezone}, hara.time/to-long #{hara.protocol.time/-to-long}, hara.sort.topological/top-nodes #{}, hara.reflect.element.multi/get-name #{}, hara.reflect.element.field/arg-params #{}, hara.common/instant #{}, hara.data/patch #{hara.data/diff hara.data/merge-or-replace}, hara.reflect.types.element/element #{}, hara.concurrent.ova/map! #{hara.concurrent.ova/ova}, hara.object.util/object-setters #{hara.reflect/query-instance hara.object.util/java->clojure}, hara.common/lazy-seq? #{}, hara.expression.shorthand/check-> #{hara.expression.shorthand/check hara.expression.shorthand/check-all}, hara.reflect.pretty.display.filter/has-params? #{hara.reflect.pretty.classes/class-convert}, hara.time/hour #{hara.protocol.time/-hour hara.time/system-timezone}, hara.concurrent.procedure.registry/get-instance #{hara.concurrent.procedure.registry/*default-registry*}, hara.common/F #{}, hara.common.watch/copy #{hara.common.watch/list hara.common.watch/set}, hara.string/join #{}, hara.common.error/suppress #{}, hara.data/assoc-nil #{}, hara.data/combine-select #{}, hara.extend.abstract/protocol-extend-type-wrappers #{hara.extend.abstract/map-walk}, hara.data.complex/gets-in-loop #{hara.data.complex/gets}, hara.data/merges-nested* #{hara.data/combine}, hara.io.scheduler/shutdown! #{hara.io.scheduler/scheduler hara.io.scheduler/kill-all hara.io.scheduler/stop!}, hara.reflect.pretty.args/args-convert #{hara.reflect.pretty.classes/class-convert hara.reflect.pretty.primitives/primitive-convert}, hara.expression.shorthand/check-all #{hara.expression.shorthand/check}, hara.extend.abstract/protocol-ns #{}, hara.common.checks/iref? #{}, hara.reflect.element.common/override #{}, hara.io.scheduler.tab/nil-array #{hara.common.primitives/F}, hara.reflect.types.modifiers/int-to-modifiers #{hara.reflect.types.modifiers/field-flags hara.reflect.types.modifiers/method-flags hara.reflect.types.modifiers/get-modifiers hara.reflect.types.modifiers/flags}, hara.concurrent.procedure.middleware/wrap-mode #{}, hara.reflect.core.extract/extract-to-ns #{hara.reflect.core.query/list-class-elements hara.reflect.core.extract/extract-to-var}, hara.expression.load/load #{hara.expression.load/load-single}, hara.expression.shorthand/eq-> #{hara.expression.shorthand/get->}, hara.string.case/spear-case #{hara.string.case/separate-camel-humps hara.common.string/to-meta hara.common.string/to-string hara.string.case/non-spear-separator-pattern hara.common.string/from-string}, hara.common.string/from-string #{}, hara.data/assocs-in #{hara.data/combine hara.data/assocs hara.data/assocs-in-filtered}, hara.reflect.types.element/element? #{}, hara.data.nested/update-keys-in #{hara.data.nested/key-paths}, hara.event.condition.util/parse-default-form #{}, hara.concurrent.ova/internal-watch-fn #{hara.concurrent.ova/ova hara.protocol.watch/-list-watch}, hara.io.scheduler.tab/parse-tab-element #{hara.io.scheduler.tab/to-long hara.common.error/error hara.io.scheduler.tab/*-}, hara.reflect.core.query/query-instance #{hara.reflect.pretty.args/args-group hara.reflect.core.query/all-instance-elements hara.reflect.pretty.display/display}, hara.reflect/query-class #{}, hara.concurrent.ova/insert! #{hara.concurrent.ova/insert-fn hara.concurrent.ova/ova hara.concurrent.ova/add-internal-watch hara.common.state/get}, hara.class/abstract? #{}, hara.reflect.core.query/all-instance-elements #{hara.class.inheritance/ancestor-list hara.reflect.core.query/list-class-elements}, hara.io.watch/start-watcher #{hara.io.watch/run-watcher hara.io.watch/event-kinds hara.io.watch/register-sub-directory hara.io.watch/pattern hara.io.watch/event-lookup hara.io.watch/watcher}, hara.protocol.time/-hours #{}, hara.common/uri? #{}, hara.reflect.common/context-class #{}, hara.concurrent.procedure/procedure #{hara.data.nested/merge-nil-nested hara.concurrent.procedure/map->Procedure hara.concurrent.procedure/*default-settings* hara.common.checks/hash-map?}, hara.io.scheduler.clock/clock-started? #{hara.io.scheduler.clock/clock hara.io.scheduler.clock/clock-stopped?}, hara.reflect.element.common/add-annotations #{hara.reflect.element.common/seed}, hara.concurrent.latch/latch #{hara.common.hash/hash-label hara.concurrent.latch/latch-fn hara.common.watch/add}, hara.component/-started? #{}, hara.time/system-timezone #{}, hara.expression/eq-> #{hara.expression/get->}, hara.function/arg-check #{hara.function/varg-count hara.function/arg-count}, hara.data.nested/key-paths #{hara.common.checks/hash-map?}, hara.time/second #{hara.protocol.time/-second hara.time/system-timezone}, hara.data.nested/keys-nested #{hara.common.checks/hash-map?}, hara.data/flatten-keys #{}, hara.data/combine-value #{hara.data/combine-select}, hara.data/dissocs #{hara.data/decombine}, hara.string/snake-case #{hara.string/non-snake-separator-pattern hara.string/separate-camel-humps}, hara.io.scheduler.tab/SCHEDULE-ELEMENTS #{}, hara.data.complex/gets #{hara.expression.shorthand/check?->}, hara.reflect.util/set-field #{hara.reflect.util/box-arg}, hara.protocol.time/-minute #{}, hara.string/path-root? #{hara.string/path-root}, hara.extend.abstract/extend-abstract #{hara.extend.abstract/protocol-all}, hara.reflect.pretty.display/display #{hara.reflect.pretty.display.sort/sort-terms-fn hara.reflect.pretty.display/first-terms-fn hara.reflect.pretty.display.filter/filter-terms-fn hara.reflect.pretty.display/select-terms-fn hara.reflect.pretty.display/merge-terms-fn}, hara.data.complex/merges-nested* #{hara.data.combine/combine hara.common.checks/hash-map?}, hara.reflect.element.method/invoke-instance-method #{hara.reflect.element.common/box-args}, hara.reflect.pretty.classes/raw-array->string #{hara.reflect.pretty.classes/raw->string}, hara.extend.abstract/protocol-extend-type #{hara.extend.abstract/protocol-extend-type-function}, hara.concurrent.ova/filter! #{hara.concurrent.ova/ova hara.concurrent.ova/indices hara.concurrent.ova/delete-indices}, hara.reflect.types.element/init-element-type #{hara.reflect.types.element/format-element hara.reflect.types.element/make-invoke-element-form}, hara.concurrent.propagate/nothing #{}, hara.function/arg-count #{}, hara.common/bigdec? #{}, hara.data/unique-nested #{}, hara.common/regex? #{}, hara.data.complex/assocs-in #{hara.common.error/error hara.data.complex/assocs hara.data.complex/assocs-in-filtered hara.data.combine/combine hara.common.checks/hash-map?}, hara.data.map/assoc-in-if #{}, hara.concurrent.procedure.middleware/wrap-interrupt #{hara.concurrent.procedure.registry/kill}, hara.io.watch/watcher #{hara.data.map/merge-nil hara.io.watch/*defaults*}, hara.concurrent.ova/reverse! #{hara.concurrent.ova/ova hara.common.state/get}, hara.string.path/val #{hara.string.path/split}, hara.reflect.pretty.display/merge-terms-fn #{hara.reflect.types.element/to-element hara.reflect.types.element/element?}, hara.common/queue #{}, hara.reflect.types.element/->Element #{hara.reflect.types.element/format-element hara.reflect.types.element/invoke-element}, hara.io.watch/remove-io-watch #{hara.io.watch/stop-watcher hara.io.watch/*filewatchers*}, hara.reflect/apply-element #{}, hara.io.scheduler/uptime #{hara.io.scheduler/scheduler hara.time/to-long}}
  
  ;;(def bundle *1)

  )
